" Turn on line numbers
set number

" Let yourself jump from unsaved files, as explained here:
" https://stackoverflow.com/a/2414883/622049
"
" You typically need this when you're jumping from file to file with tags.
set hidden

" Highlight search results
set hlsearch

" Highlight search results as you type in the string
set incsearch

" Automatically reload files when they change underneath you (for example,
" when you change your working directory in git).
set autoread

" Enable mouse support
set mouse=a

" Calm down the colors provided by vimdiff
" https://stackoverflow.com/a/17183382/622049
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

" Disable the arrow keys in normal mode (leave in normal mode)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Disable the arrow keys in insert mode (send to normal mode)
" https://stackoverflow.com/a/23549041/622049
noremap! <Up> <Esc>
noremap! <Down> <Esc>
noremap! <Left> <Esc>
noremap! <Right> <Esc>

" As suggested here:
" https://stackoverflow.com/questions/14465383/how-to-navigate-multiple-ctags-matches-in-vim/42078499#42078499
nnoremap <C-]> g<C-]>

set nocompatible
" Always use four spaces for a tab
" https://stackoverflow.com/a/234578
filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

" Keep copied text on the clipboard when you exit VIM:
" https://stackoverflow.com/a/9381778
autocmd VimLeave * call system("xsel -ib", getreg('+'))
" This variation is your own
autocmd VimLeave * call system("xsel -ip", getreg('*'))

" You also tried this, but it was very hard to setup:
" http://clang.llvm.org/docs/ClangFormat.html#vim-integration
"
" If you installed clang-format with the ubuntu package manager, you need to
" make sure you update the path to clang-format.py based on which clang-format
" package you installed:
" https://askubuntu.com/questions/730609/how-can-i-find-the-directory-to-clang-format
"
" There is a Python interpreter compiled into VIM:
" https://stackoverflow.com/questions/45217522
"
" It looks like it is a Python3 interpreter now:
" https://askubuntu.com/a/821235/612216
" https://reviews.llvm.org/D23319
"
" So, you can’t really use the default clang-format.py installed with ubuntu
" (it’s written for Python2).
autocmd FileType c,cpp,hpp,h ClangFormatAutoEnable

" As suggested here:
" https://github.com/airblade/vim-gitgutter#getting-started
set updatetime=100

" These lines let you quickly navigate between errors:
" https://github.com/w0rp/ale#faq-navigation
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" The default CPP compile options are the same for clang and gcc:
" https://github.com/w0rp/ale/blob/73ca1e71918a0b50b7bbcbed91857c3618ad93cc/doc/ale-cpp.txt
"
" From that link, they are:
" -std=c++14 -Wall
"
" We can't leave these as the default because we compile with c++17, and
" adding c++14 to the end of the compile command line overrides any previous
" c++17 switch. To see how these variables are added to the end of the
" command that is pulled from compile_commands.json, see:
" https://github.com/w0rp/ale/blob/73ca1e71918a0b50b7bbcbed91857c3618ad93cc/ale_linters/cpp/gcc.vim
" https://github.com/w0rp/ale/blob/73ca1e71918a0b50b7bbcbed91857c3618ad93cc/ale_linters/cpp/clang.vim
let g:ale_cpp_gcc_options = '-std=c++1z -Wall -Wextra'
let g:ale_cpp_clang_options = '-std=c++1z -Wall -Wextra'

" By default, read compile arguments from compile_commands.json:
" https://github.com/w0rp/ale/blob/73ca1e71918a0b50b7bbcbed91857c3618ad93cc/doc/ale-c.txt
"
" As part of setting up clang tooling (the clang-tools Ubuntu package) so you
" can use tools like clang-tidy and clang-check from the command line, you have
" to create a symlink to the compile_commands.json in a build directory from
" a source directory or a directory above the source directory:
" http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html
"
" Because you are usually going to be doing that anyways, you aren't bothering
" to set g:ale_c_build_dir_names (we should be able to find the compile commands
" JSON without it).
let g:ale_c_parse_compile_commands = 1

" Use ccache to cache the work of gcc and clang compilers.
"
" Unfortunately ccache doesn't help you when you have errors in compilation;
" this will only help you confirm that files compiled correctly again faster.
let g:ale_cpp_gcc_executable = "/usr/lib/ccache/gcc"
let g:ale_cpp_clang_executable = "/usr/lib/ccache/clang++"

" See the documentation here on g:ale_linters:
" https://github.com/w0rp/ale/blob/73ca1e71918a0b50b7bbcbed91857c3618ad93cc/doc/ale.txt#L12
"
" And notice the line:
" 'All linters will be run for unspecified filetypes.'
"
" Since the default dictionary in that documentation does not include C++, all
" C++ linters are run by default. Unfortunately you have many C++ tools
" installed and when ALE tries to use them as linters you get too many false
" positive errors from all the linters you haven't worked on. List of
" installed linters to fix:
" clangd
" cppcheck
"
" Limit C++ linters to only the linters you've tested:
let g:ale_linters = {'cpp' : ['clang', 'clangcheck', 'clangtidy', 'gcc']}

" If you see a clang-tidy problem a lot you want to automatically fix, see the
" targets in:
" HDMA/cmake/clang_tidy.cmake
" (create a new story for every *individual* check you want to add)
"
" List clang-tidy checks in the same order they are listed here (alphabetical):
" https://clang.llvm.org/extra/clang-tidy/checks/list.html
let g:ale_cpp_clangtidy_checks = []
call add(g:ale_cpp_clangtidy_checks, 'bugprone-*')
call add(g:ale_cpp_clangtidy_checks, 'cppcoreguidelines-*')
call add(g:ale_cpp_clangtidy_checks, 'google-runtime-int')
call add(g:ale_cpp_clangtidy_checks, 'llvm-*,-llvm-include-order')
call add(g:ale_cpp_clangtidy_checks, 'misc-*')
call add(g:ale_cpp_clangtidy_checks, 'modernize-*')
call add(g:ale_cpp_clangtidy_checks, 'performance-*')
call add(g:ale_cpp_clangtidy_checks, 'readability-*')

" You were running into this check with LOG_INFO() and many other commands.
"
" Perhaps you should ignore CPP core guidelines suggestions that require the GSL:
" https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#S-gsl
" (until you or someone else evaluates whether we should use it)
"
" You also tested that you could work around this issue with a static_cast,
" but you didn't want to go through the trouble of getting that patch into our
" code:
" https://github.com/KjellKod/g3log/issues/192
call add(g:ale_cpp_clangtidy_checks, '-cppcoreguidelines-pro-bounds-array-to-pointer-decay')

" These checks all have to be disabled because of Google Test (you are often
" editing Test.*.cpp files). Long-term, the upstream should be fixed to ignore
" or fix these issues. You've only found this effort on their part:
" https://github.com/google/googletest/pull/903
"
" EXPECT_EQ from google test emits this error:
" do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
call add(g:ale_cpp_clangtidy_checks, '-cppcoreguidelines-pro-type-vararg')
"
" The TEST/GTEST_TEST macros emit these errors:
" use '= delete' to prohibit calling of a special member function [modernize-use-equals-delete]
" initializing non-owner argument of type 'internal::TestFactoryBase *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
" class 'PolylineFeatureConsolidator_constructor_Test' defines a copy constructor and a copy assignment..., a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
call add(g:ale_cpp_clangtidy_checks, '-modernize-use-equals-delete,-cppcoreguidelines-owning-memory,-cppcoreguidelines-special-member-functions')

" To debug your full list of checks.
"echo g:ale_cpp_clangtidy_checks

" The following are mostly borrowed from the "Vimrc Example" on this page:
" https://github.com/rhysd/vim-clang-format
autocmd FileType h,hpp,cpp nnoremap <Leader>cf :ClangFormat<CR>
autocmd FileType h,hpp,cpp vnoremap <buffer><Leader>cf :ClangFormat<CR>
" You've installed vim-operator-user to have this recommended functionality,
" but you don't really understand the advantages of it yet. For now you're
" just using the other commands.
autocmd FileType h,hpp,cpp map <buffer><Leader>x <Plug>(operator-clang-format)

" As suggested here:
" https://dougblack.io/words/a-good-vimrc.html
set wildmenu

set tags=./tags;,tags;

" This lets you open more tabs with vim -p
" https://unix.stackexchange.com/questions/30665/gvim-p-limit-of-opened-tabs
set tabpagemax=100

" You were seeing registers get truncated when you closed and reopened VIM.
" See this SE answer for details:
" https://vi.stackexchange.com/a/12759/17093
set viminfo='50,<400,s100

" The following command was partially inspired by this answer:
" https://stackoverflow.com/a/21931739/622049
"
" You had several problems with early variations on this solution; for
" example, the Ggrep! provided by vim-fugitive opens search results in a new file
" in the /tmp folder rather than in a new buffer, so gf didn't work to follow
" files. Git! had the same problem, so you really couldn't use git-fugitive.
"
" The final solution was based more on this answer:
" https://superuser.com/a/435850/293032
command -nargs=1 Ggr execute 'enew | silent :0read !git g' <q-args> | set syn=cpp | norm 1G

" The following map was inspired by this question:
" https://stackoverflow.com/q/21931116/622049
nnoremap <Leader>f :execute 'Ggr '.expand('<cword>')<cr>

" You select keys to map using :help map-which-keys as suggested here:
" http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_2)
:map <F2> :set syn=cpp<CR>

" This mapping copies the current filename to the clipboard; you may want
" to use variations on it as well (manually typed). See:
" https://www.brianstorti.com/vim-registers/
nmap <F1> :let @+=@%<CR>
