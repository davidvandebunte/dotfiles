# You don't want to use Ctrl-b with tmux because it maps to back one character
# in bash:
# https://jeffawang.com/posts/how-i-use-tmux/#tmux-prefix
#
# You saw Ctrl-space recommended in these places as well:
# https://www.unixtutorial.org/2014/11/how-to-change-tmux-meta-key-to-a-better-one/
# https://sanctum.geek.nz/arabesque/reloading-tmux-config/
#
# Ctrl-b is also used to go back a page in VIM (with Ctrl-f)
unbind C-b
set-option -g prefix C-space

# See
# https://github.com/neovim/neovim/wiki/FAQ#esc-in-tmux-or-gnu-screen-is-delayed
# Found by running :checkhealth in nvim
set -sg escape-time 10

# You added these lines to make it easier to reorder your tmux windows as you
# got too many. See:
# https://superuser.com/a/552493/293032
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# You naturally use the vi mode of tmux, but you never remember how to start
# "visual mode" and finish your copy. These key bindings add VIM like options:
# https://sanctum.geek.nz/arabesque/vi-mode-in-tmux/
#
# Use older syntax for backwards compatibility on wopr3 and other machines (where
# you're still using tmux 2.1 on Ubuntu 16.04).
#
# This solution includes 'y' to copy to your clipboard and actually makes this
# work in both versions of tmux:
# https://stackoverflow.com/questions/35016458
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
           sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

# bind-key syntax changed in 2.4 -- selection / copy / paste
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' " \
   bind-key -t vi-copy v   begin-selection; \
   bind-key -t vi-copy V   send -X select-line; \
   bind-key -t vi-copy C-v rectangle-toggle; \
   bind-key -t vi-copy y   copy-pipe 'xclip -selection clipboard -in'"

# Newer versions
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' " \
   bind-key -T copy-mode-vi v   send -X begin-selection; \
   bind-key -T copy-mode-vi V   send -X select-line; \
   bind-key -T copy-mode-vi C-v send -X rectangle-toggle; \
   bind-key -T copy-mode-vi y   send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'"

# You added this line to get the terminal prompt to show in color. See:
# https://unix.stackexchange.com/a/1098/233125
set -g default-terminal "screen-256color"

# Turn mouse mode based on this suggestion:
# https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
set -g mouse on

# https://mutelight.org/practical-tmux
set -g base-index 1

# You prefer vi mode for editing; the emacs mode forces you to go way out of the
# home position on your keyboard:
# https://superuser.com/a/209608/293032
set-window-option -g mode-keys vi

# Based on the suggestion here:
# https://superuser.com/a/918934/293032
bind X confirm-before kill-session

# It's difficult to distinguish which tmux pane in a window is active
# unless they are colored differently.
#
# A side effect is that it's a little easier to read with the black
# background. You can also tell when you're in tmux.
#
# Colors selected from here:
# https://superuser.com/questions/285381
#
# See also this answer:
# https://stackoverflow.com/a/33562182/622049
set -g window-active-style 'bg=colour16'

# Open new windows and split windows in the same directory:
# https://unix.stackexchange.com/a/118381/233125
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Add pane splitting similar to VIM
# https://unix.stackexchange.com/a/118381/233125
# https://gist.github.com/spicycode/1229612
bind S split-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
