[alias]
    br = branch

    # Commit commands
    ci = commit
    cian = commit --amend --no-edit

    co = checkout
    cp = cherry-pick

    # GNU find will work regardless of whether you're in a git repository, but
    # it will critically not know to ignore the html, HDR-data, etc. directories.
    f = "!git ls-files | grep --ignore-case"

    g = grep -WEIn --heading

    # A "quick" view of recent commits, inspired by the command here:
    # https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
    #
    # All of these aliases are helpful because gitk takes a long time (15 or
    # so seconds) over ssh (and requires that -X be enabled).
    l = !"git lg1 -20"

    # The following aliases were taken from:
    # https://stackoverflow.com/a/34467298/622049
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2 = !"git lg2-specific --all"
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3 = !"git lg3-specific --all"
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    # Mnemonic: Recursive pull
    #
    # You used to "git fetch" then "git rebase" separately so you could review
    # all changes before integrating them, but I don't think that's a good use
    # of time. It'd be better to be reading code or learning something in
    # focused work.
    rpull = "!git pull --rebase && git submodule update --rebase --recursive"

    st = status
[blame]
    coloring = highlightRecent
[color]
    # Since we're using VIM as the pager for git grep, we don't want ANSI escape
    # characters intermixed in the output.
    grep = false
[core]
    # Use vim to edit commit messages:
    # https://git-scm.com/docs/git-config#git-config-coreeditor
    editor = vim
    # Use custom `.gitignore`
    excludesfile = ~/.gitignore_global
[diff]
    # You're using meld as your git difftool:
    # https://git-scm.com/docs/git-config#git-config-difftool
    #
    # See:
    # https://git-scm.com/docs/git-difftool
    tool = meld
[difftool]
    # Don't prompt before each invocation of the diff tool:
    # https://git-scm.com/docs/git-config#git-config-difftoolprompt
    prompt = false
[gitreview]
    # Search "git config --global gitreview.remote origin" on this page:
    # https://nofluffjuststuff.com/magazine/2016/04/understanding_and_applying_gerrit_part_3_gerrit_submit_types_and_git_review
    remote = origin
[include]
    path = ~/.gitconfig_local
[merge]
    # https://stackoverflow.com/a/163659/622049
    tool = vimdiff
    conflictstyle = diff3
[mergetool]
    prompt = false
[pager]
    # You use VIM as a your "git grep" pager so that you have CPP highlighting
    # (something git will never be able to do).
    #
    # A side effect is that you can use your VIM cursor to follow tags in these
    # searches.
    #
    # See:
    # https://git-scm.com/docs/git-config#git-config-pagerltcmdgt
    g = vim -c 'set syn=cpp' -R -
[rebase]
    # See --autosquash on the git rebase command:
    # https://git-scm.com/docs/git-rebase#git-rebase---no-autosquash
    #
    # This article explains the feature in more detail:
    # https://robots.thoughtbot.com/autosquashing-git-commits
    autosquash = true
